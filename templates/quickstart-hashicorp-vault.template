---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'QS(0039) HashiCorp Vault License: Apache 2.0 (Please do not remove) Oct,18,2019'
Metadata:
  AWSAMIRegionMap:
    Filters:
      CISUBUNTU1604:
        product-code: 2l0khimiqztu90zd64xu99tz5
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network configuration
      Parameters:
      - AccessCIDR
      - VPCID
      - VPCCIDR
      - BastionSecurityGroupID
      - PrivateSubnet1ID
      - PrivateSubnet2ID
      - PrivateSubnet3ID
      - PublicSubnet1ID
      - PublicSubnet2ID
      - PublicSubnet3ID
    - Label:
        default: Vault Setup
      Parameters:
      - EmailAddress
      - KeyPairName
      - VaultVersion
      - VaultAMIOS
      - VaultServerNodes
      - VaultInstanceType
      - VaultDownloadURL
      - VaultNumberOfKeys
      - VaultNumberOfKeysForUnseal
      - VaultClientRoleName
      - VaultClientNodes
      - VaultKubernetesEnable
      - VaultKubernetesHostURL
      - VaultKubernetesRoleName
      - VaultKubernetesCertificate
      - VaultKubernetesJWT
    - Label:
        default: AWS Quick Start configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
      - QSS3BucketRegion
    - Label:
        default: Load Balancer configuration
      Parameters:
      - LoadBalancerType
      - DomainName
      - HostedZoneID
      - ACMSSLCertificateArn
    ParameterLabels:
      BastionSecurityGroupID:
        default: Bastion host security group ID
      PrivateSubnet1ID:
        default: First subnet ID for autoscaling group
      PrivateSubnet2ID:
        default: Second subnet ID for autoscaling group
      PrivateSubnet3ID:
        default: Third subnet ID for autoscaling group
      PublicSubnet1ID:
        default: First public subnet ID for autoscaling group
      PublicSubnet2ID:
        default: Second public subnet ID for autoscaling group
      PublicSubnet3ID:
        default: Third public subnet ID for autoscaling group
      KeyPairName:
        default: Key Name
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      QSS3BucketRegion:
        default: Quick Start S3 Bucket Region
      AccessCIDR:
        default: Permitted IP range
      EmailAddress:
        default: Email Address
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      VaultVersion:
        default: Which version of Hashicorp Vault to install
      VaultAMIOS:
        default: Which OS AMI should the Vault cluster run
      VaultClientNodes:
        default: Number of Vault client nodes
      VaultServerNodes:
        default: Number of Vault server nodes
      VaultInstanceType:
        default: Instance type for Hashicorp Vault nodes
      VaultNumberOfKeys:
        default: Number of unseal keys created when Hashicorp Vault cluster is initialized
      VaultNumberOfKeysForUnseal:
        default: Number of unseal keys required to unseal the Hashicorp Vault cluster
      VaultClientRoleName:
        default: Internal name of the AWS IAM role authorized to use Vault
      LoadBalancerType:
        default: Internval or external load balancer
      ACMSSLCertificateArn:
        default: SSL certificate ARN
      HostedZoneID:
        default: Route 53 hosted zone ID
      DomainName:
        default: Load Balancer DNS Domain Name
      VaultKubernetesEnable:
        default: Enable Kubernetes Authentication and create role
      VaultKubernetesRoleName:
        default: Internal Hashicorp Vault name for Kubernetes Authentication role
      VaultKubernetesHostURL:
        default: "URL of the Kubernetes cluster eg - https://192.168.99.100:8443"
      VaultKubernetesCertificate:
        default: "AWS SSM Parameter containing PEM encoded CA cert of the Kubernetes cluster"
      VaultKubernetesJWT:
        default: "AWS SSM Parameter containing JWT Token for the Kubernetes cluster service account"
Parameters:
  VaultAMIOS:
    AllowedValues:
      - Ubuntu-1604-HVM
      - CIS-Ubuntu-1604-HVM
    Default: Ubuntu-1604-HVM
    Description: The Linux distribution for the AMI to be used for the Vault instances.
    Type: String
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: id_rsa_aws
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g.,
      sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  VaultServerNodes:
    Type: String
    Description: Number of Hashicorp Vault server cluster members.
    Default: '5'
    AllowedValues:
     - '3'
     - '5'
     - '7'
  VaultClientNodes:
    Type: String
    Description: Number of Vault nodes to demonstrate client AWS IAM access to Hashicorp Vault.
    Default: '0'
    AllowedValues:
     - '0'
     - '1'
  VaultNumberOfKeys:
    Type: String
    Default: '5'
    AllowedPattern: "^([1-9]|[1-8][0-9]|9[0-9])$"
    ConstraintDescription: Must be a value between 1 and 99.
    Description: Number of unseal keys to create for Hashicorp Vault.
  VaultNumberOfKeysForUnseal:
    Type: String
    Default: '3'
    AllowedPattern: "^([1-9]|[1-8][0-9]|9[0-9])$"
    ConstraintDescription: Must be a value between 1 and 99.
    Description: Number of keys required for unsealing Hashicorp Vault.
  VaultInstanceType:
    Type: String
    Description: Hashicorp Vault node instance type.
    AllowedValues:
    - 'c5.12xlarge'
    - 'c5.18xlarge'
    - 'c5.24xlarge'
    - 'c5.2xlarge'
    - 'c5.4xlarge'
    - 'c5.9xlarge'
    - 'c5.large'
    - 'c5.xlarge'
    - 'm5.12xlarge'
    - 'm5.16xlarge'
    - 'm5.24xlarge'
    - 'm5.2xlarge'
    - 'm5.4xlarge'
    - 'm5.8xlarge'
    - 'm5.large'
    - 'm5.metal'
    - 'm5.xlarge'
    - 'r5.12xlarge'
    - 'r5.16xlarge'
    - 'r5.24xlarge'
    - 'r5.2xlarge'
    - 'r5.4xlarge'
    - 'r5.8xlarge'
    - 'r5.large'
    - 'r5.xlarge'
    - 't3.2xlarge'
    - 't3.large'
    - 't3.medium'
    - 't3.micro'
    - 't3.nano'
    - 't3.small'
    - 't3.xlarge'
    ConstraintDescription: Choose an instance type. m4.large or larger recommended.
    Default: m5.large
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-hashicorp-vault/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  EmailAddress:
    Type: String
    Description: Email Address for SNS Topic. Alarms for Vault instance memory utilization
    Default: none@example.com
  PrivateSubnet1ID:
    Description: ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-xxxxxxxx)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-xxxxxxxx)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Description: ID of the private subnet 3 in Availability Zone 3 (e.g., subnet-xxxxxxxx)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: ID of the public subnet 1 in Availability Zone 1 (e.g., subnet-xxxxxxxx)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of the public subnet 2 in Availability Zone 2 (e.g., subnet-xxxxxxxx)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet3ID:
    Description: ID of the public subnet 3 in Availability Zone 3 (e.g., subnet-xxxxxxxx)
    Type: AWS::EC2::Subnet::Id
  AccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    Description: 'The CIDR IP range that is permitted to access Consul Note: a value
      of 0.0.0.0/0 will allow access from ANY ip address'
    Type: String
  VPCID:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    Description: CIDR Block for the VPC
    Type: String
  VaultVersion:
    Type: String
    Description: Which version of Hashicorp Vault to install
    Default: 1.4.0
    AllowedValues:
    - 1.4.0
  VaultClientRoleName:
    Type: String
    Default: "quickstart-client-role-iam"
    MinLength: "3"
    ConstraintDescription: This identifier should be at least 3 characters in length.
    Description: The internal Hashicorp Vault identifier for the AWS IAM role.
  LoadBalancerType:
    Type: String
    Default: "Internal"
    Description: Is the Load Balancer for Vault internal or external.
    AllowedValues:
    - "Internal"
    - "External"
  DomainName:
    Type: String
    Description: The fully qualified domain name for the Hashicorp Vault load balancer. Use with 'HostedZoneID' if you are not using SSL.
    MaxLength: 128
    Default: ""
  HostedZoneID:
    Type: String
    Description: Route 53 Hosted Zone ID of the domain name. Used in conjunction with 'DomainName'.
    Default: ""
  ACMSSLCertificateArn:
    Description: The Amazon Resource Name (ARN) of the SSL certificate to use for the load balancer. Use 'ACMSSLCertificateArn' if you are not using 'DomainName' and 'HostedZoneID'.
    Type: String
    Default: ''
  VaultKubernetesEnable:
    Description: Enable Kubernetes Authentication and create role
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  VaultKubernetesRoleName:
    Description: Internal Hashicorp Vault name for Kubernetes Authentication role
    Type: String
    Default: 'kube-auth-role'
  VaultKubernetesHostURL:
    Description: "URL of the Kubernetes cluster eg: - https://192.168.99.100:8443"
    Type: String
  VaultKubernetesCertificate:
    Description: "AWS SSM Parameter containing your Kubernetes cluster CA cert"
    Type: String
  VaultKubernetesJWT:
    Description: "AWS SSM Parameter containing JWT Token for the Kubernetes cluster service account"
    Type: String
Mappings:
  LinuxAMINameMap:
    Ubuntu-1604-HVM:
      Code: US1604HVM
    CIS-Ubuntu-1604-HVM:
      Code: CISUBUNTU1604
  AWSAMIRegionMap:
    AMI:
      CISUBUNTU1604: "CIS 1 Ubuntu 16.04"
      US1604HVM: "Ubuntu 16.04 LTS"
    eu-north-1:
      CISUBUNTU1604: ami-0aac33a0d5fbb7783 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-0eb04b36ce3c3b0ac #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    ap-south-1:
      CISUBUNTU1604: ami-0276232e1f03bc046 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-011c09ac5e09ba22f #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    eu-west-3:
      CISUBUNTU1604: ami-01028ca386421bffa #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-0a3fd389b49c645bf #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    eu-west-2:
      CISUBUNTU1604: ami-0addd243b556771dd #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-014ae7e330e2651dc #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    eu-west-1:
      CISUBUNTU1604: ami-07704fc9abcc6c8f9 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-01793b684af7a3e2c #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    ap-northeast-2:
      CISUBUNTU1604: ami-0d494ee4c6e9ba2b9 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-0582405a4f3bf27c9 #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    ap-northeast-1:
      CISUBUNTU1604: ami-05b4fcf6c27799ec7 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-003c6ed5c5176db19 #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    sa-east-1:
      CISUBUNTU1604: ami-0362ea71f01b65019 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-017555a9eb5076e5f #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    ca-central-1:
      CISUBUNTU1604: ami-0a228636cea8a2698 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-02da4c4d67205fcc8 #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    ap-southeast-1:
      CISUBUNTU1604: ami-00d4a1e80203512e5 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-0b21b3ea2cb8660a5 #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    ap-southeast-2:
      CISUBUNTU1604: ami-048ff64b3f4bc163d #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-09d19bae4dbb07062 #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    eu-central-1:
      CISUBUNTU1604: ami-0e435fddb305d6f9c #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-0257508f40836e6cf #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    us-east-1:
      CISUBUNTU1604: ami-08dee8ccd705ca825 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-04ac550b78324f651 #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    us-east-2:
      CISUBUNTU1604: ami-08ea22e68c0de3e0d #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-0009e532719fe9bff #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    us-west-2:
      CISUBUNTU1604: ami-04c0bc30b93eb5a25 #CIS Ubuntu Linux 16.04 LTS Benchmark v1.0.0.18 - Level 1-2ba49cfb-babd-43d3-81f6-3657aeb0f101-ami-0555da345a6355b23.4
      US1604HVM: ami-02e30ba14d8ffa6e6 #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200317
    me-south-1:
      CISUBUNTU1604: ami-0fc34e7761742a76d #null
      US1604HVM: ami-0fc34e7761742a76d #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200407
    ap-east-1:
      CISUBUNTU1604: ami-5493d525 #null
      US1604HVM: ami-5493d525 #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200407
    ap-northeast-3:
      CISUBUNTU1604: ami-0da6a3ae32f8f6730 #null
      US1604HVM: ami-0da6a3ae32f8f6730 #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200407
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  InternalLoadBalancer: !Equals [!Ref LoadBalancerType, 'Internal']
  CustomDns: !Not [!Equals [!Ref DomainName, '']]
  HostedZoneExists: !Not [!Equals [!Ref HostedZoneID, '']]
  CreateDns: !And
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''
Resources:
  # ALB & ACM 
  VaultDNSRecord:
    Condition: CreateDns
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !Ref DomainName
      AliasTarget:
        HostedZoneId: !GetAtt VaultServerApplicationLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt VaultServerApplicationLoadBalancer.DNSName
      HostedZoneId: !Ref 'HostedZoneID'
  VaultServerApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Hashicorp Vault Server Load Balancer
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: !Ref AccessCIDR
          IpProtocol: '-1'
  VaultServerApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # TODO : Check if we are internal/external
      Subnets: 
      - !If [InternalLoadBalancer, !Ref PrivateSubnet1ID, !Ref PublicSubnet1ID]
      - !If [InternalLoadBalancer, !Ref PrivateSubnet2ID, !Ref PublicSubnet2ID]
      - !If [InternalLoadBalancer, !Ref PrivateSubnet3ID, !Ref PublicSubnet3ID]
      SecurityGroups: 
      - !Ref 'VaultServerApplicationLoadBalancerSecurityGroup'
      Scheme: !If [InternalLoadBalancer, "internal", "internet-facing"]
  VaultServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCID
      Port: 8200
      Protocol: HTTP
      Matcher:
        HttpCode: 200-499
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/sys/health?activecode=200&standbycode=200&sealedcode=200&uninitcode=200
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
  VaultServerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref VaultServerListenerHTTPS
      Priority: 1
      Conditions:
      - Field: path-pattern
        Values:
        - "/"
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: VaultServerTargetGroup
  VaultServerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !If [ CreateDns, !GetAtt "ACMCertificate.Outputs.ACMCertificate", !Ref ACMSSLCertificateArn ]
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref VaultServerTargetGroup
      LoadBalancerArn: !Ref VaultServerApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
  VaultServerListenerRedirectToHTTPS:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref VaultServerApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
  ACMCertificate:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - W9198
    Type: AWS::CloudFormation::Stack
    Condition: CreateDns
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-aws-acm-certificate/templates/quickstart-aws-acm-certificate.template.yml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        DomainName: !Ref DomainName
        HostedZoneID: !Ref HostedZoneID
  CopyZipsTemplate:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - W9198
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/lambda-copyzips/templates/copy-zips.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        SourceObjects:  "functions/packages/LeaderElection/lambda.zip,functions/packages/ClusterBootstrap/lambda.zip"
  VaultSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Ref: EmailAddress
        Protocol: email
  # Vault will populate this when the cluster is initialized
  VaultSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Vault Root/Recovery key"
      KmsKeyId: !Ref VaultKmsKey 
      SecretString: "empty"
  VaultKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Vault Seal/Unseal key"
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: '*'
        - Sid: Allow administration of the key
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/${VaultInstanceRole}"
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: '*'
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            # TODO: Potentially add the Lambda Functions to use the keys so potentially add their roles here as principles
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/${VaultInstanceRole}
          Action:
          - kms:DescribeKey
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey
          - kms:GenerateDataKeyWithoutPlaintext
          Resource: '*'
  VaultSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables SSH access from the Bastion servers.
      VpcId:
        Ref: VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId:
          Ref: BastionSecurityGroupID
      # Allow the VPC to connect to the vault API of the Cluster
      - IpProtocol: tcp
        FromPort: 8200
        ToPort: 8200
        CidrIp:
          Ref: VPCCIDR
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp:
          Ref: VPCCIDR
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - VaultSecGroup
  VaultLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "Vault-Audit-Logs-${AWS::StackName}"
      RetentionInDays: 7
  # Informs the cluster nodes if they should boot strap
  VaultLeaderElectedSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: "false"
  # This is to know who the elected leader is
  VaultLeaderSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: "null"
  # List of Vault Cluster members managed by Lambda for cluster bootstrap control
  VaultClusterMembersSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: "{[]}"
  VaultInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            - cloudwatch:GetMetricStatistics
            - cloudwatch:ListMetrics
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            Resource: "*"
          # TODO: Restrict to Parameters created above
          - Effect: Allow
            Action:
            - ssm:GetParameter
            Resource: "*"
          # TODO: Restrict to the Lambda functions LeaderElection/ClusterBootstrapping
          - Effect: Allow
            Action:
            - lambda:*
            Resource: "*"
          # TODO: Restrict to the Lambda functions LeaderElection/ClusterBootstrapping
          - Effect: Allow
            Action:
            - s3:*
            Resource: "*"
          # TODO: Restrict to the Lambda functions LeaderElection/ClusterBootstrapping
          - Effect: Allow
            Action:
            - autoscaling:*
            Resource: "*"
          # TODO: restrict to just describe instances to find local IP addresses
          - Effect: Allow
            Action:
            - ec2:*
            Resource: "*"
          # Allow the first vault server to store the ROOT KEY and RECOVERY KEY
          - Effect: Allow
            Action:
            - secretsmanager:UpdateSecretVersionStage
            - secretsmanager:UpdateSecret
            - secretsmanager:PutSecretValue
            - secretsmanager:GetSecretValue
            Resource:
            - "*" # !Ref VaultSecret  # Ref gives the ARN
          - Effect: Allow
            Action:
              - iam:GetRole
            Resource: !GetAtt VaultClientRole.Arn
          - Action:
            - s3:GetObject
            Resource: !Sub
              - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
              - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
            Effect: Allow
  VaultInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: VaultInstanceRole
  VaultServerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub "VaultLC-${AWS::StackName}"
      InstanceType: !Ref VaultInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups: 
      - !Ref VaultSecGroup
      ImageId:
        Fn::FindInMap:
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - !FindInMap
          - LinuxAMINameMap
          - !Ref VaultAMIOS
          - Code
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: 20
          VolumeType: gp2
      IamInstanceProfile: !Ref "VaultInstanceProfile" 
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            
            # Install git
            apt-get update
            apt-get install -y git jq zip curl

            #Load Linux utils
            until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git ; do echo "Retrying"; done
            cd /quickstart-linux-utilities && source quickstart-cfn-tools.source
            
            # Prep operating systems
            qs_update-os || qs_err
            qs_bootstrap_pip || qs_err
            qs_aws-cfn-bootstrap || qs_err

            # Fetch bootstrap script from Bucket & Run
            export LEADER_ELECTED_SSM_PARAMETER=${VaultLeaderElectedSSM}
            export LEADER_ID_SSM_PARAMETER=${VaultLeaderSSM}
            export LEADER_SSM_PARAM=${VaultLeaderSSM}
            export VAULT_CLUSTER_MEMBERS_SSM_PARAMETER=${VaultClusterMembersSSM}
            export VAULT_LOG_GROUP=${VaultLogGroup}
            
            export AWS_REGION=${AWS::Region}
            export CFN_STACK_NAME=${AWS::StackName}
            export LEADER_ELECTION_LAMBDA=${LeaderElectionLambda}
            export CLUSTER_BOOTSTRAP_LAMBDA=${ClusterBootstrapLambda}
            export KMS_KEY=${VaultKmsKey}
            
            export VAULT_SECRET=${VaultSecret}
            export VAULT_CLIENT_ROLE=${VaultClientRole.Arn}
            export VAULT_CLIENT_ROLE_NAME=${VaultClientRoleName}
            export VAULT_VERSION=${VaultVersion}
            export VAULT_NUMBER_OF_KEYS=${VaultNumberOfKeys}
            export VAULT_NUMBER_OF_KEYS_FOR_UNSEAL=${VaultNumberOfKeysForUnseal}

            export VAULT_KUBERNETES_ENABLE=${VaultKubernetesEnable}
            export VAULT_KUBERNETES_ROLE_NAME=${VaultKubernetesRoleName}
            export VAULT_KUBERNETES_HOST_URL=${VaultKubernetesHostURL}
            export VAULT_KUBERNETES_CERTIFICATE=${VaultKubernetesCertificate}
            export VAULT_KUBERNETES_JWT=${VaultKubernetesJWT}

            pip install awscli
            mkdir -p /opt/vault/policies/ /opt/vault/scripts/ /etc/vault.d/
            
            aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/functions.sh .
            aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/bootstrap_server.sh .
            chmod +x bootstrap_server.sh
            $(which bash) -e ./bootstrap_server.sh
            /usr/local/bin/cfn-signal -e $? --stack ${!CFN_STACK_NAME} --region ${!AWS_REGION} --resource "VaultServerAutoScalingGroup"

            # Signalling done from within bootstrap script
            # echo ${SomeValue} # for clean looking !Sub
          - SomeValue: "SomeValue"
  VaultServerAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub "VaultServerAutoScalingGroup-${AWS::StackName}"
      LaunchConfigurationName: !Ref VaultServerLaunchConfiguration
      TargetGroupARNs:
      - !Ref VaultServerTargetGroup
      MinSize: !Ref VaultServerNodes
      MaxSize: !Ref VaultServerNodes
      DesiredCapacity: !Ref VaultServerNodes
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref "AWS::StackName"
              - VaultServer
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref VaultServerNodes
        Timeout: PT12M
  LeaderElectionLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !GetAtt 'CopyZipsTemplate.Outputs.LambdaZipsBucket'
        S3Key: 
          Fn::Join:
            - ""
            - - !Ref QSS3KeyPrefix
              - "functions/packages/LeaderElection/lambda.zip"
      Handler: "lambda_function.lambda_handler"
      Runtime: python3.6
      Environment:
        Variables:
          LeaderElectedSSM: !Ref VaultLeaderElectedSSM
          LeaderSSM: !Ref VaultLeaderSSM
          AutoScalingGroup: !Sub "VaultServerAutoScalingGroup-${AWS::StackName}"
      Timeout: 300
      Role: !GetAtt LeaderElectionLambdaExecutionRole.Arn
  LeaderElectionLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          # TODO: Restrict permissions to just the SSM Parameters we create
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - ssm:*
          # TODO: Restrict to only our AutoScaling group
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - autoscaling:DescribeAutoScalingGroups         
  ClusterBootstrapLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !GetAtt 'CopyZipsTemplate.Outputs.LambdaZipsBucket'
        S3Key: 
          Fn::Join:
            - ""
            - - !Ref QSS3KeyPrefix
              - "functions/packages/ClusterBootstrap/lambda.zip"
      Handler: "lambda_function.lambda_handler"
      Environment:
        Variables:
          LeaderElectedSSM: !Ref VaultLeaderElectedSSM
          LeaderSSM: !Ref VaultLeaderElectedSSM
          ClusterMembersSSM: !Ref VaultClusterMembersSSM
          AutoScalingGroup: !Sub "VaultServerAutoScalingGroup-${AWS::StackName}"
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt ClusterBootstrapLambdaExecutionRole.Arn
  ClusterBootstrapLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents  
          # TODO: Restrict permissions to just the SSM Parameters we create
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - ssm:*
          # TODO: Restrict to only our AutoScaling group
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - autoscaling:DescribeAutoScalingGroups
  VaultClientLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub "VaultClientLC-${AWS::StackName}"
      InstanceType:
        Ref: VaultInstanceType
      KeyName:
        Ref: KeyPairName
      SecurityGroups:
        - !Ref VaultClientSecurityGroup
      ImageId:
        Fn::FindInMap:
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - !FindInMap
          - LinuxAMINameMap
          - !Ref VaultAMIOS
          - Code
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: 20
          VolumeType: gp2
      IamInstanceProfile: 
        Ref: "VaultClientInstanceProfile" 
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            
            # Install git
            apt-get update
            apt-get install -y git jq zip curl

            #Load Linux utils
            until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git ; do echo "Retrying"; done
            cd /quickstart-linux-utilities && source quickstart-cfn-tools.source
            
            # Prep operating systems
            qs_update-os || qs_err
            qs_bootstrap_pip || qs_err
            qs_aws-cfn-bootstrap || qs_err

            # TODO: Fetch script from Bucket && Run
            export LEADER_SSM_PARAM=${VaultLeaderSSM}
            export AWS_REGION=${AWS::Region}
            export CFN_STACK_NAME=${AWS::StackName}
            export VAULT_CLIENT_ROLE_ID=${VaultClientRole}
            export VAULT_CLIENT_ROLE_NAME=${VaultClientRoleName}
            export VAULT_VERSION=${VaultVersion}
            export ASG_NAME=${VaultServerAutoScalingGroup}

            pip install awscli
            mkdir -p /opt/vault/policies/ /opt/vault/scripts/ /etc/vault.d/
            aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/functions.sh .
            aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/bootstrap_client.sh .
            chmod +x bootstrap_client.sh
            ./bootstrap_client.sh
            # Signalling done from within bootstrap script
            # echo ${SomeValue} # for clean looking !Sub
          - SomeValue: "SomeValue"
  VaultClientAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub "VaultClientAutoScalingGroup-${AWS::StackName}"
      LaunchConfigurationName: !Ref VaultClientLaunchConfiguration
      MinSize: !Ref VaultClientNodes
      MaxSize: !Ref VaultClientNodes
      DesiredCapacity: !Ref VaultClientNodes
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref "AWS::StackName"
              - VaultClient
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref VaultClientNodes
        Timeout: PT12M
  VaultClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables SSH access from the Bastion servers.
      VpcId:
        Ref: VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId:
          Ref: BastionSecurityGroupID
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp:
          Ref: VPCCIDR
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - VaultClientSecurityGroup
  VaultClientInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: VaultClientRole
  VaultClientRole:
    Type: AWS::IAM::Role
    Properties:
      # This example allows for an EC2 instance to assume this role. This should be customized for where the Role is being used. Eg: Lambda/Codebuild/EC2 etc.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          # TODO: Restrict to the Lambda functions LeaderElection/ClusterBootstrapping
          - Effect: Allow
            Action:
            - s3:*
            Resource: "*"
          # TODO: Adjust this to be a distinct policy to reference this role. (Circular dependency)
          #- Effect: Allow
          #  Action:
          #  - sts:AssumeRole
          #  Resource: !GetAtt "VaultClientRole.Arn"
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            - iam:GetInstanceProfile
            - iam:GetUser
            - iam:GetRole
            Resource: "*"
          - Effect: Allow
            Action:
            - autoscaling:DescribeAutoScalingGroups
            Resource: "*"
Outputs:
  VaultLoadBalancer:
    Value: 
      !Sub 
      - "https://${DNSAddress}/"
      - DNSAddress: !If [ CustomDns, !Ref DomainName, !GetAtt "VaultServerApplicationLoadBalancer.DNSName"  ]
  VaultSecret:
    Value: !Ref "VaultSecret"
    Description: The AWS Secrets Manager Secret containing the ROOT TOKEN and Recovery Secret for Hashicorp Vault.
  VaultClientIAMRoleArn:
    Value: !GetAtt "VaultClientRole.Arn"
    Description: The ARN of the AWS IAM role linked to Hashicorp Vault.
  VaultClientIAMRoleName:
    Value: !Ref "VaultClientRole"
    Description: The name of the AWS IAM role linked to Hashicorp Vault.
  VaultKMSKeyId:
    Value: !Ref "VaultKmsKey"
    Description: The AWS KMS Key used to Auto Unseal Hashicorp Vault and encrypt the ROOT TOKEN and Recovery Secret.
  VaultKMSKeyArn:
    Value: !GetAtt "VaultKmsKey.Arn"
    Description: The AWS KMS Key used to Auto Unseal Hashicorp Vault and encrypt the ROOT TOKEN and Recovery Secret.
  VaultClientRoleId:
    Value: !Ref VaultClientRoleName
    Description: The Hashicorp Vault identifier of the AWS client role.
  VaultAuditLogGroup:
    Value: !Ref VaultLogGroup
    Description: CloudWatch Log Group where the Hashicorp Vault audit logs are recorded
